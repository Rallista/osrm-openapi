//
// RouteLeg.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
    import AnyCodable
#endif

public struct RouteLeg: Codable, Hashable {
    /** The distance traveled by the route, in double meters. */
    public var distance: Double?
    /** The estimated travel time, in double number of seconds. */
    public var duration: Double?
    public var weight: Double?
    public var summary: String?
    public var steps: [RouteStep]?
    public var annotation: Annotation?
    /** A valhalla and mapbox extension for via waypoints. */
    public var viaWaypoints: [String]?

    public init(distance: Double? = nil, duration: Double? = nil, weight: Double? = nil, summary: String? = nil, steps: [RouteStep]? = nil, annotation: Annotation? = nil, viaWaypoints: [String]? = nil) {
        self.distance = distance
        self.duration = duration
        self.weight = weight
        self.summary = summary
        self.steps = steps
        self.annotation = annotation
        self.viaWaypoints = viaWaypoints
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case distance
        case duration
        case weight
        case summary
        case steps
        case annotation
        case viaWaypoints = "via_waypoints"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(distance, forKey: .distance)
        try container.encodeIfPresent(duration, forKey: .duration)
        try container.encodeIfPresent(weight, forKey: .weight)
        try container.encodeIfPresent(summary, forKey: .summary)
        try container.encodeIfPresent(steps, forKey: .steps)
        try container.encodeIfPresent(annotation, forKey: .annotation)
        try container.encodeIfPresent(viaWaypoints, forKey: .viaWaypoints)
    }
}
