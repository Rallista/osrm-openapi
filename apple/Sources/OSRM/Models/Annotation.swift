//
// Annotation.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
    import AnyCodable
#endif

public struct Annotation: Codable, Hashable {
    /** The distance, in metres, between each pair of coordinates */
    public var distance: [Double]?
    /** The duration between each pair of coordinates, in seconds */
    public var duration: [Double]?
    public var datasources: [Int]?
    public var nodes: [Int]?
    public var weight: [Int]?
    public var speed: [Double]?
    public var metadata: AnnotationMetadata?

    public init(distance: [Double]? = nil, duration: [Double]? = nil, datasources: [Int]? = nil, nodes: [Int]? = nil, weight: [Int]? = nil, speed: [Double]? = nil, metadata: AnnotationMetadata? = nil) {
        self.distance = distance
        self.duration = duration
        self.datasources = datasources
        self.nodes = nodes
        self.weight = weight
        self.speed = speed
        self.metadata = metadata
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case distance
        case duration
        case datasources
        case nodes
        case weight
        case speed
        case metadata
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(distance, forKey: .distance)
        try container.encodeIfPresent(duration, forKey: .duration)
        try container.encodeIfPresent(datasources, forKey: .datasources)
        try container.encodeIfPresent(nodes, forKey: .nodes)
        try container.encodeIfPresent(weight, forKey: .weight)
        try container.encodeIfPresent(speed, forKey: .speed)
        try container.encodeIfPresent(metadata, forKey: .metadata)
    }
}
